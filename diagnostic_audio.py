"""
Diagnostic Audio pour Assistant Vocal
====================================

Script pour diagnostiquer les probl√®mes de synth√®se vocale
"""

import pyttsx3
import time

def test_tts_simple():
    """Test simple de TTS"""
    print("üß™ Test TTS simple...")
    
    try:
        engine = pyttsx3.init()
        engine.say("Test simple")
        engine.runAndWait()
        print("‚úÖ Test simple r√©ussi")
        return True
    except Exception as e:
        print(f"‚ùå Test simple √©chou√©: {e}")
        return False

def test_tts_multiple():
    """Test de TTS multiple pour reproduire le probl√®me"""
    print("üß™ Test TTS multiple...")
    
    try:
        engine = pyttsx3.init()
        
        # Configuration
        voices = engine.getProperty('voices')
        if voices:
            for voice in voices:
                if voice and 'french' in voice.name.lower():
                    engine.setProperty('voice', voice.id)
                    print(f"Voix fran√ßaise: {voice.name}")
                    break
        
        engine.setProperty('rate', 160)
        engine.setProperty('volume', 1.0)
        
        # Tests multiples
        phrases = [
            "Premi√®re phrase",
            "Deuxi√®me phrase", 
            "Troisi√®me phrase",
            "Quatri√®me phrase"
        ]
        
        for i, phrase in enumerate(phrases, 1):
            print(f"üîä Test {i}: {phrase}")
            engine.stop()  # Arr√™ter avant chaque phrase
            time.sleep(0.1)
            engine.say(phrase)
            engine.runAndWait()
            time.sleep(0.2)
            print(f"‚úÖ Test {i} termin√©")
        
        print("‚úÖ Test multiple r√©ussi")
        return True
        
    except Exception as e:
        print(f"‚ùå Test multiple √©chou√©: {e}")
        return False

def test_tts_conversation():
    """Test simulant une conversation"""
    print("üß™ Test simulation conversation...")
    
    try:
        engine = pyttsx3.init()
        
        # Configuration voix fran√ßaise
        voices = engine.getProperty('voices')
        if voices:
            for voice in voices:
                if voice and 'hortense' in voice.name.lower():
                    engine.setProperty('voice', voice.id)
                    print(f"Voix: {voice.name}")
                    break
        
        engine.setProperty('rate', 160)
        engine.setProperty('volume', 1.0)
        
        # Simulation conversation compl√®te
        conversation = [
            "Pr√©sent ! Je vous √©coute.",
            "Compris ! Je traite votre demande.",
            "Connexion √† Mistral en cours.",
            "R√©ponse re√ßue de Mistral avec succ√®s.",
            "Voici ma r√©ponse test.",
            "Traitement termin√© avec succ√®s !",
            "T√¢che termin√©e ! Que puis-je faire d'autre ?"
        ]
        
        for i, phrase in enumerate(conversation, 1):
            print(f"üó£Ô∏è  √âtape {i}: {phrase}")
            
            # M√©thode robuste
            engine.stop()
            time.sleep(0.1)
            engine.say(phrase)
            engine.runAndWait()
            time.sleep(0.3)
            
            # V√©rifier si l'utilisateur entend
            if i == 3:  # Apr√®s 3 phrases
                response = input("Entendez-vous les phrases ? (o/n): ")
                if response.lower() not in ['o', 'oui']:
                    print("‚ùå Probl√®me d√©tect√© √† l'√©tape 3")
                    return False
        
        print("‚úÖ Simulation conversation r√©ussie")
        return True
        
    except Exception as e:
        print(f"‚ùå Simulation conversation √©chou√©e: {e}")
        return False

def diagnostic_moteur():
    """Diagnostic complet du moteur TTS"""
    print("üîç Diagnostic moteur TTS...")
    
    try:
        engine = pyttsx3.init()
        
        # Informations sur le moteur
        print(f"Moteur: {type(engine)}")
        
        # Voix disponibles
        voices = engine.getProperty('voices')
        print(f"Nombre de voix: {len(voices) if voices else 0}")
        
        if voices:
            for i, voice in enumerate(voices):
                if voice:
                    print(f"  {i}: {voice.name}")
        
        # Propri√©t√©s actuelles
        rate = engine.getProperty('rate')
        volume = engine.getProperty('volume')
        print(f"Vitesse: {rate}")
        print(f"Volume: {volume}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Diagnostic √©chou√©: {e}")
        return False

def main():
    print("üéØ Diagnostic Audio Assistant Vocal")
    print("=" * 50)
    
    # Tests progressifs
    tests = [
        ("Diagnostic moteur", diagnostic_moteur),
        ("Test simple", test_tts_simple),
        ("Test multiple", test_tts_multiple),
        ("Test conversation", test_tts_conversation)
    ]
    
    resultats = {}
    
    for nom, test_func in tests:
        print(f"\n{'='*20} {nom} {'='*20}")
        resultats[nom] = test_func()
        time.sleep(1)
    
    # R√©sum√©
    print(f"\nüìä R√©sum√© des tests:")
    for nom, resultat in resultats.items():
        status = "‚úÖ R√âUSSI" if resultat else "‚ùå √âCHOU√â"
        print(f"  {nom}: {status}")
    
    # Recommandations
    print(f"\nüí° Recommandations:")
    if not resultats.get("Test simple", False):
        print("- Probl√®me TTS de base - V√©rifiez l'installation de pyttsx3")
    elif not resultats.get("Test multiple", False):
        print("- Probl√®me TTS multiple - Ajoutez des d√©lais entre les phrases")
    elif not resultats.get("Test conversation", False):
        print("- Probl√®me TTS conversation - R√©initialisez le moteur p√©riodiquement")
    else:
        print("- Tous les tests r√©ussis - Le probl√®me peut venir d'ailleurs")

if __name__ == "__main__":
    main()
