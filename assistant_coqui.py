"""
Assistant Vocal avec Coqui TTS - Version Simplifi√©e
====================================================
Utilise des mod√®les TTS plus r√©cents et compatibles
"""

import speech_recognition as sr
import requests
import json
import time
import os
import sys
from datetime import datetime

# Import TTS avec gestion d'erreur
try:
    from TTS.api import TTS
    COQUI_AVAILABLE = True
except ImportError:
    COQUI_AVAILABLE = False
    print("‚ö†Ô∏è Coqui TTS non disponible")

class AssistantVocalCoqui:
    def __init__(self):
        # Configuration Ollama
        self.ollama_url = "http://127.0.0.1:11434"
        self.model_name = "mistral:instruct"
        
        # Configuration reconnaissance vocale
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        
        # Configuration optimis√©e
        self.recognizer.energy_threshold = 4000
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = 1.5
        
        # Configuration TTS
        self.tts_engine = None
        self.current_tts_method = "fallback"
        
        # √âtat
        self.active = True
        
        print("ü§ñ Assistant Vocal avec Coqui TTS")
        self.setup_tts()
        self.speak("Bonjour ! Je suis votre assistant vocal avec une voix naturelle.")
    
    def setup_tts(self):
        """Configure le meilleur moteur TTS disponible"""
        if not COQUI_AVAILABLE:
            print("‚ùå Coqui TTS non disponible, utilisation du fallback SAPI")
            self.current_tts_method = "sapi"
            return
        
        try:
            # Tester diff√©rents mod√®les par ordre de pr√©f√©rence
            models_to_try = [
                ("tts_models/en/ljspeech/vits", "anglais-vits"),
                ("tts_models/en/ljspeech/tacotron2-DDC", "anglais-tacotron"),
                ("tts_models/en/jenny/jenny", "jenny")
            ]
            
            for model_name, description in models_to_try:
                try:
                    print(f"üß™ Test du mod√®le {description}...")
                    self.tts_engine = TTS(model_name=model_name, progress_bar=False, gpu=False)
                    self.current_tts_method = "coqui"
                    print(f"‚úÖ Mod√®le {description} initialis√© avec succ√®s")
                    return
                except Exception as e:
                    print(f"‚ö†Ô∏è √âchec {description}: {e}")
                    continue
            
            print("‚ùå Aucun mod√®le Coqui compatible, utilisation SAPI")
            self.current_tts_method = "sapi"
            
        except Exception as e:
            print(f"‚ùå Erreur Coqui TTS: {e}")
            self.current_tts_method = "sapi"
    
    def speak(self, text):
        """Synth√®se vocale avec m√©thode optimale"""
        if not text or not text.strip():
            return False
        
        print(f"üîä Assistant: {text}")
        
        if self.current_tts_method == "coqui" and self.tts_engine:
            return self.speak_coqui(text)
        else:
            return self.speak_sapi(text)
    
    def speak_coqui(self, text):
        """Synth√®se avec Coqui TTS"""
        try:
            # Fichier temporaire
            output_file = "temp_tts.wav"
            
            # G√©n√©rer l'audio
            start_time = time.time()
            self.tts_engine.tts_to_file(text=text, file_path=output_file)
            duration = time.time() - start_time
            
            # Lire l'audio avec Windows
            import subprocess
            subprocess.run([
                "powershell", "-Command", 
                f"(New-Object Media.SoundPlayer '{output_file}').PlaySync()"
            ], capture_output=True)
            
            # Nettoyer
            try:
                os.remove(output_file)
            except:
                pass
            
            print(f"‚úÖ Coqui TTS r√©ussi ({duration:.2f}s)")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur Coqui TTS: {e}")
            print("üîÑ Basculement vers SAPI...")
            self.current_tts_method = "sapi"
            return self.speak_sapi(text)
    
    def speak_sapi(self, text):
        """Synth√®se avec Windows SAPI (fallback)"""
        try:
            # Nettoyer le texte
            safe_text = text.replace('"', "'").replace('\\', '')
            if len(safe_text) > 500:
                safe_text = safe_text[:497] + "..."
            
            # Commande PowerShell SAPI
            cmd = f'powershell -Command "Add-Type -AssemblyName System.Speech; $s = New-Object System.Speech.Synthesis.SpeechSynthesizer; $s.SetOutputToDefaultAudioDevice(); $s.Speak(\\"{safe_text}\\"); $s.Dispose()"'
            
            result = os.system(cmd)
            if result == 0:
                print("‚úÖ SAPI TTS r√©ussi")
                return True
            else:
                print(f"‚ùå Erreur SAPI: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur SAPI: {e}")
            return False
    
    def speak_quick(self, text):
        """Version rapide pour les confirmations"""
        return self.speak(text)
    
    def listen_for_wake_word(self):
        """√âcoute le mot de r√©veil"""
        print("üëÇ En attente du mot de r√©veil 'Assistant'...")
        
        with self.microphone as source:
            print("üîß Calibration microphone...")
            self.recognizer.adjust_for_ambient_noise(source, duration=2)
            print(f"‚úÖ Seuil: {self.recognizer.energy_threshold}")
        
        while self.active:
            try:
                with self.microphone as source:
                    audio = self.recognizer.listen(source, timeout=1, phrase_time_limit=4)
                
                try:
                    text = self.recognizer.recognize_google(audio, language='fr-FR').lower()
                    print(f"üé§ D√©tect√©: {text}")
                    
                    if 'assistant' in text:
                        self.speak_quick("Pr√©sent ! Je vous √©coute.")
                        self.conversation_mode()
                
                except sr.UnknownValueError:
                    pass
                
            except sr.WaitTimeoutError:
                pass
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                time.sleep(1)
    
    def conversation_mode(self):
        """Mode conversation"""
        print("üí¨ Mode conversation activ√©")
        
        while self.active:
            try:
                with self.microphone as source:
                    print("üé§ Parlez...")
                    audio = self.recognizer.listen(source, timeout=15, phrase_time_limit=30)
                
                try:
                    command = self.recognizer.recognize_google(audio, language='fr-FR')
                    print(f"üé§ Commande: {command}")
                    
                    # Commandes de sortie
                    if any(word in command.lower() for word in ['fini', 'termin√©', 'pause']):
                        self.speak("Conversation termin√©e. Redites 'Assistant'.")
                        break
                    
                    # Traitement
                    self.speak_quick("Compris ! Je traite votre demande.")
                    self.process_command(command)
                    
                    if not self.active:
                        break
                    
                    self.speak_quick("Termin√© ! Autre chose ?")
                    
                except sr.UnknownValueError:
                    self.speak_quick("D√©sol√©, je n'ai pas compris.")
                    
            except sr.WaitTimeoutError:
                self.speak("Je retourne en veille.")
                break
    
    def process_command(self, command):
        """Traite une commande"""
        command_lower = command.lower()
        
        # Commandes sp√©ciales
        if any(word in command_lower for word in ['arr√™t', 'au revoir']):
            self.speak("Au revoir !")
            self.active = False
            return
        
        if 'test voix' in command_lower:
            self.speak("Test de synth√®se vocale. Cette voix vous pla√Æt-elle ?")
            return
        
        if 'change voix' in command_lower:
            self.speak("Changement de m√©thode de synth√®se vocale.")
            if self.current_tts_method == "coqui":
                self.current_tts_method = "sapi"
                self.speak("Basculement vers la voix Windows.")
            else:
                if COQUI_AVAILABLE:
                    self.setup_tts()
                    self.speak("Tentative de basculement vers Coqui TTS.")
                else:
                    self.speak("Coqui TTS non disponible.")
            return
        
        # Envoi √† Mistral
        self.speak_quick("Connexion √† Mistral...")
        
        try:
            response = self.query_mistral(command)
            if response and response.strip():
                print(f"üìù R√©ponse: {response}")
                self.speak(response)
            else:
                self.speak("Mistral n'a pas pu r√©pondre.")
        except Exception as e:
            self.speak("Erreur lors de la connexion √† Mistral.")
    
    def query_mistral(self, prompt):
        """Requ√™te Mistral"""
        url = f"{self.ollama_url}/api/generate"
        
        payload = {
            "model": self.model_name,
            "prompt": f"R√©ponds en fran√ßais de mani√®re concise : {prompt}",
            "stream": False
        }
        
        try:
            response = requests.post(url, json=payload, timeout=30)
            response.raise_for_status()
            result = response.json()
            return result.get('response', '').strip()
        except Exception as e:
            raise Exception(str(e))
    
    def run(self):
        """Lance l'assistant"""
        print("üöÄ Assistant vocal pr√™t")
        print("üí° Dites 'Assistant' pour commencer")
        print("üí° Dites 'test voix' pour tester la synth√®se")
        print("üí° Dites 'change voix' pour changer de m√©thode TTS")
        print("-" * 50)
        
        try:
            self.listen_for_wake_word()
        except KeyboardInterrupt:
            print("\nüëã Arr√™t...")
            self.speak("Au revoir !")

def main():
    print("üé§ Assistant Vocal Coqui TTS")
    print("=" * 50)
    
    if not COQUI_AVAILABLE:
        print("‚ö†Ô∏è Pour installer Coqui TTS: pip install TTS")
    
    try:
        assistant = AssistantVocalCoqui()
        assistant.run()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()
