"""
Assistant Vocal PC avec Ollama Mistral
=====================================

D√©pendances requises:
- speech_recognition : pour la reconnaissance vocale
- pyttsx3 : pour la synth√®se vocale (text-to-speech)
- pyaudio : pour l'audio (microphone)
- requests : pour les appels API
- pygame : alternative pour l'audio si n√©cessaire

Installation:
pip install speech_recognition pyttsx3 pyaudio requests pygame
"""

import speech_recognition as sr
import pyttsx3
import requests
import json
import threading
import os
import subprocess
import re
import time
import sys
import os
import subprocess
import re
from datetime import datetime

# Import Coqui TTS avec gestion d'erreur
try:
    from TTS.api import TTS
    COQUI_AVAILABLE = True
except ImportError:
    COQUI_AVAILABLE = False

class AssistantVocal:
    def __init__(self):
        # Configuration Ollama
        self.ollama_url = "http://127.0.0.1:11434"
        self.model_name = "mistral:instruct"
        
        # Configuration de la reconnaissance vocale
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        
        # Configuration optimis√©e pour √©viter les coupures de parole
        self.recognizer.energy_threshold = 4000  # Seuil d'√©nergie plus √©lev√©
        self.recognizer.dynamic_energy_threshold = True  # Ajustement automatique
        self.recognizer.pause_threshold = 1.5  # Attendre 1.5 secondes de silence avant de s'arr√™ter
        self.recognizer.phrase_time_limit = None  # Pas de limite de temps pour une phrase
        self.recognizer.non_speaking_duration = 0.8  # Dur√©e de silence pour consid√©rer que la phrase est finie
        
        # Configuration de la synth√®se vocale
        self.tts_engine = pyttsx3.init()
        self.setup_tts()
        
        # Configuration Coqui TTS (voix naturelle)
        self.coqui_engine = None
        self.current_tts_method = "auto"  # auto, coqui, sapi
        self.setup_coqui_tts()
        
        # √âtat de l'assistant
        self.listening = False
        self.active = True
        
        # Syst√®me de fonctions d'actions
        self.setup_action_system()
        
        print("ü§ñ Assistant Vocal initialis√©")
        self.speak("Bonjour ! Je suis votre assistant vocal. Dites 'Assistant' pour me r√©veiller.")
    
    def setup_action_system(self):
        """Configure le syst√®me de fonctions d'actions"""
        # Dictionnaire des fonctions d'actions disponibles
        self.action_functions = {
            "ouvrir_application": self.action_ouvrir_application,
            "fermer_application": self.action_fermer_application,
            "lister_applications": self.action_lister_applications,
            "ouvrir_fichier": self.action_ouvrir_fichier,
            "rechercher_web": self.action_rechercher_web
        }
        
        # Mots-cl√©s pour identifier les actions vs questions
        self.action_keywords = {
            "ouvrir": ["ouvre", "ouvrir", "lance", "lancer", "d√©marre", "d√©marrer", "ex√©cute", "ex√©cuter"],
            "fermer": ["ferme", "fermer", "quitte", "quitter", "arr√™te", "arr√™ter", "termine", "terminer"],
            "lister": ["liste", "lister", "montre", "montrer", "affiche", "afficher", "applications"],
            "rechercher": ["recherche", "cherche", "trouve", "google", "bing"],
            "naviguer": ["va sur", "navigue", "visite", "site"]
        }
        
        # Charger les applications scann√©es
        self.load_scanned_applications()
        
        # Si pas d'applications scann√©es, utiliser la liste de base
        if not hasattr(self, 'applications') or not self.applications:
            self.setup_default_applications()
    
    def load_scanned_applications(self):
        """Charge les applications depuis le fichier scann√©"""
        try:
            applications_file = os.path.join(os.path.dirname(__file__), "applications_assistant.json")
            if os.path.exists(applications_file):
                with open(applications_file, 'r', encoding='utf-8') as f:
                    scanned_apps = json.load(f)
                
                print(f"üì± {len(scanned_apps)} applications charg√©es depuis le scan")
                
                # Convertir au format interne
                self.applications = {}
                self.app_commands_map = {}  # Mapping commandes vocales -> app key
                
                for app_key, app_data in scanned_apps.items():
                    self.applications[app_key] = {
                        "nom": app_data["nom"],
                        "chemin": app_data["chemin"],
                        "processus": app_data["processus"]
                    }
                    
                    # Cr√©er le mapping des commandes vocales
                    for command in app_data.get("commandes", []):
                        self.app_commands_map[command.lower()] = app_key
                
                print(f"üéØ {len(self.app_commands_map)} commandes vocales mapp√©es")
                return True
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du chargement des applications: {e}")
            return False
    
    def setup_default_applications(self):
        """Configuration des applications de base (fallback)"""
        print("üì± Utilisation de la liste d'applications par d√©faut")
        
        # Applications connues avec leurs chemins
        self.applications = {
            "chrome": {
                "nom": "Google Chrome",
                "chemin": "chrome",
                "processus": "chrome.exe"
            },
            "firefox": {
                "nom": "Mozilla Firefox",
                "chemin": "firefox",
                "processus": "firefox.exe"
            },
            "notepad": {
                "nom": "Bloc-notes",
                "chemin": "notepad",
                "processus": "notepad.exe"
            },
            "calculatrice": {
                "nom": "Calculatrice",
                "chemin": "calc",
                "processus": "calc.exe"
            },
            "word": {
                "nom": "Microsoft Word",
                "chemin": "winword",
                "processus": "winword.exe"
            },
            "excel": {
                "nom": "Microsoft Excel",
                "chemin": "excel",
                "processus": "excel.exe"
            },
            "vscode": {
                "nom": "Visual Studio Code",
                "chemin": "code",
                "processus": "code.exe"
            }
        }
        
        # Mapping simple pour les applications par d√©faut
        self.app_commands_map = {}
        for app_key, app_data in self.applications.items():
            self.app_commands_map[app_key] = app_key
            # Ajouter des variations du nom
            name_words = app_data["nom"].lower().split()
            for word in name_words:
                if len(word) > 2:
                    self.app_commands_map[word] = app_key
    
    def setup_tts(self):
        """Configure les param√®tres de synth√®se vocale avec gestion robuste"""
        try:
            # Test de l'engine principal
            if self.tts_engine:
                voices = self.tts_engine.getProperty('voices')
                
                # Afficher toutes les voix disponibles pour debug
                print("üó£Ô∏è  Voix disponibles:")
                french_voice_found = False
                
                if voices:
                    for i, voice in enumerate(voices):
                        if voice:
                            print(f"   {i}: {voice.name}")
                            # Chercher une voix fran√ßaise (priorit√© √† Hortense)
                            if 'hortense' in voice.name.lower():
                                self.tts_engine.setProperty('voice', voice.id)
                                print(f"‚úÖ Voix fran√ßaise s√©lectionn√©e: {voice.name}")
                                french_voice_found = True
                                break
                            elif 'french' in voice.name.lower() or 'fr' in voice.id.lower():
                                self.tts_engine.setProperty('voice', voice.id)
                                print(f"‚úÖ Voix fran√ßaise s√©lectionn√©e: {voice.name}")
                                french_voice_found = True
                                # Continue pour chercher Hortense si possible
                
                if not french_voice_found:
                    print("‚ö†Ô∏è  Aucune voix fran√ßaise trouv√©e, utilisation de la voix par d√©faut")
                
                # Configuration optimis√©e
                self.tts_engine.setProperty('rate', 160)  # Vitesse claire
                self.tts_engine.setProperty('volume', 1.0)  # Volume maximum
                
                print("‚úÖ Synth√®se vocale configur√©e")
            else:
                print("‚ùå Moteur TTS non initialis√©")
                
        except Exception as e:
            print(f"‚ùå Erreur configuration TTS: {e}")
            print("üîß L'assistant utilisera des m√©thodes de fallback")
    
    def setup_coqui_tts(self):
        """Configure Coqui TTS pour des voix naturelles"""
        if not COQUI_AVAILABLE:
            print("‚ö†Ô∏è Coqui TTS non disponible - utilisation de Windows SAPI")
            self.current_tts_method = "sapi"
            return
        
        try:
            print("üé§ Initialisation Coqui TTS...")
            # Utiliser le mod√®le anglais qui fonctionne bien
            self.coqui_engine = TTS(
                model_name="tts_models/en/ljspeech/tacotron2-DDC", 
                progress_bar=False, 
                gpu=False
            )
            # Utiliser SAPI par d√©faut car plus stable
            self.current_tts_method = "sapi"
            print("‚úÖ Coqui TTS disponible en option - Voix SAPI fran√ßaise par d√©faut")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Coqui TTS non disponible: {e}")
            print("üîß Utilisation de Windows SAPI")
            self.current_tts_method = "sapi"
    
    def speak(self, text):
        """Synth√®se vocale intelligente - Coqui TTS puis SAPI"""
        if not text or not text.strip():
            return False
        
        print(f"üîä Assistant: {text}")
        
        # M√©thode 1: Coqui TTS (voix naturelle)
        if self.current_tts_method in ["auto", "coqui"] and self.coqui_engine:
            if self.speak_coqui(text):
                return True
            else:
                print("üîÑ Basculement vers SAPI...")
                self.current_tts_method = "sapi"
        
        # M√©thode 2: Windows SAPI (fallback)
        return self.speak_sapi(text)
    
    def speak_coqui(self, text):
        """Synth√®se avec Coqui TTS (voix naturelle)"""
        try:
            # Fichier temporaire
            output_file = "temp_coqui_tts.wav"
            
            # G√©n√©rer l'audio avec Coqui
            start_time = time.time()
            self.coqui_engine.tts_to_file(text=text, file_path=output_file)
            duration = time.time() - start_time
            
            # Lire avec PowerShell (plus stable)
            result = subprocess.run(
                ['powershell', '-Command', f"(New-Object Media.SoundPlayer '{output_file}').PlaySync()"],
                capture_output=True,
                text=True,
                timeout=15  # Timeout √©tendu √† 15 secondes
            )
            
            # Nettoyer
            try:
                os.remove(output_file)
            except:
                pass
            
            if result.returncode == 0:
                print(f"‚úÖ Coqui TTS r√©ussi ({duration:.2f}s)")
                return True
            else:
                print(f"‚ö†Ô∏è Erreur lecture audio: {result.returncode}")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur Coqui TTS: {e}")
            return False
    
    def speak_sapi(self, text):
        """Synth√®se avec Windows SAPI (voix fran√ßaise optimis√©e)"""
        try:
            # Nettoyer le texte pour PowerShell - √©liminer tous les caract√®res probl√©matiques
            safe_text = text.replace('"', "").replace("'", "").replace('\\', '').replace('`', '')
            safe_text = safe_text.replace('\n', ' ').replace('\r', ' ')
            safe_text = safe_text.replace(':', ' ').replace(';', ' ')
            
            # Limiter la longueur
            if len(safe_text) > 400:
                safe_text = safe_text[:397] + "..."
            
            # Commande PowerShell SAPI simplifi√©e et robuste
            cmd = f'powershell -Command "Add-Type -AssemblyName System.Speech; $s = New-Object System.Speech.Synthesis.SpeechSynthesizer; $s.SetOutputToDefaultAudioDevice(); $s.Rate = 1; $s.Volume = 100; $s.Speak(\\"{safe_text}\\"); $s.Dispose()"'
            
            start_time = time.time()
            result = os.system(cmd)
            duration = time.time() - start_time
            
            if result == 0:
                print(f"‚úÖ SAPI r√©ussi ({duration:.2f}s)")
                return True
            else:
                print(f"‚ùå Erreur SAPI: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur SAPI: {e}")
            return False
    
    # ========================================
    # SYST√àME DE FONCTIONS D'ACTIONS
    # ========================================
    
    def categorize_request(self, command):
        """Cat√©gorise une demande : ACTION ou QUESTION"""
        command_lower = command.lower()
        
        # V√©rifier les mots-cl√©s d'action
        for category, keywords in self.action_keywords.items():
            for keyword in keywords:
                if keyword in command_lower:
                    return "ACTION", category, command
        
        # Si aucun mot-cl√© d'action trouv√©, c'est une question
        return "QUESTION", None, command
    
    def analyze_action_request(self, command, action_type):
        """Analyse une demande d'action et d√©termine la fonction √† ex√©cuter"""
        command_lower = command.lower()
        
        if action_type == "ouvrir":
            # Chercher quelle application ouvrir avec la fonction am√©lior√©e
            app_key, app_data = self.find_application(command)
            if app_key:
                return "ouvrir_application", {"application": app_key}
            
            # Si aucune application sp√©cifique trouv√©e
            return "ouvrir_application", {"application": "inconnue", "command": command}
        
        elif action_type == "lister":
            # Commande de listage des applications
            return "lister_applications", {}
        
        elif action_type == "fermer":
            # Chercher quelle application fermer
            for app_key, app_info in self.applications.items():
                if app_key in command_lower or app_info["nom"].lower() in command_lower:
                    return "fermer_application", {"application": app_key}
            
            return "fermer_application", {"application": "inconnue", "command": command}
        
        elif action_type == "rechercher":
            # Extraire ce qu'il faut rechercher
            patterns = [
                r"recherche\s+(.+)",
                r"cherche\s+(.+)",
                r"trouve\s+(.+)",
                r"google\s+(.+)",
            ]
            
            for pattern in patterns:
                match = re.search(pattern, command_lower)
                if match:
                    return "rechercher_web", {"query": match.group(1).strip()}
            
            return "rechercher_web", {"query": "inconnue", "command": command}
        
        return None, None
    
    def find_application(self, query):
        """Trouve une application correspondant √† la requ√™te avec IA directe intelligente"""
        query = query.lower().strip()
        
        print(f"üîç Recherche d'application pour: '{query}'")
        
        # ü§ñ NOUVELLE APPROCHE: Demander directement √† l'IA ce que l'utilisateur veut
        print("ü§ñ Analyse IA directe de la demande...")
        ai_result = self.ai_smart_app_search("", query)  # Pas d'extraction, analyse directe
        if ai_result:
            return ai_result
        
        # ======================================================================
        # FALLBACK: M√©thodes classiques seulement si l'IA √©choue
        # ======================================================================
        
        # Extraire le nom de l'application avec plusieurs patterns (fallback uniquement)
        app_name = query
        
        # Pattern 1: "ouvre/lance [l'application] <nom>"
        patterns = [
            r"(?:je veux que tu|je voudrais que tu)\s+(?:ouvres?|lances?|d√©marres?)\s+(.+)",
            r"(?:ouvre|ouvrir|lance|lancer|d√©marre|d√©marrer|ex√©cute|ex√©cuter)\s+(?:l'application\s+)?(.+)",
            r"(?:ouvre|ouvrir|lance|lancer|d√©marre|d√©marrer|ex√©cute|ex√©cuter)\s+(.+)",
            r"(?:je veux|j'aimerais|besoin de)\s+(?:regarder|voir|√©couter|utiliser)\s+(?:un|une|le|la|des)?\s*(.+)",
            r"(.+)"  # Fallback : prendre tout
        ]
        
        for pattern in patterns:
            match = re.search(pattern, query)
            if match:
                app_name = match.group(1).strip()
                # Enlever les mots parasites
                app_name = re.sub(r'\b(?:l\'application|application|le|la|les|un|une|de|pour|√†)\b', '', app_name).strip()
                # Si le nom est trop court ou vide apr√®s nettoyage, ignorer ce pattern
                if len(app_name.strip()) < 3:
                    continue
                break
        
        print(f"üéØ Nom d'application extrait (fallback): '{app_name}'")
        
        # Recherche 1: Dans les commandes vocales mapp√©es (recherche exacte d'abord)
        if hasattr(self, 'app_commands_map'):
            # Recherche exacte
            if app_name in self.app_commands_map:
                app_key = self.app_commands_map[app_name]
                print(f"‚úÖ Trouv√© via commande exacte: '{app_name}' ‚Üí {app_key}")
                return app_key, self.applications[app_key]
            
            # Recherche contient avec crit√®res stricts
            for command, app_key in self.app_commands_map.items():
                # √âviter les matches trop courts et mots courants pour r√©duire faux positifs
                excluded_words = {'de', 'le', 'la', 'un', 'une', 'me', 'ai', 'et', 'ou', 'du'}
                if len(app_name) > 4 and app_name.lower() not in excluded_words and (app_name in command or command in app_name):
                    print(f"‚úÖ Trouv√© via commande: '{command}' ‚Üí {app_key}")
                    return app_key, self.applications[app_key]
        
        # Recherche 2: Recherche sp√©cifique pour applications populaires
        specific_mappings = {
            "netflix": ["netflix", "4df9e0f8.netflix"],
            "chrome": ["chrome", "google chrome"],
            "firefox": ["firefox", "mozilla firefox"],
            "word": ["word", "microsoft word", "winword"],
            "excel": ["excel", "microsoft excel"],
            "powerpoint": ["powerpoint", "microsoft powerpoint"],
            "outlook": ["outlook", "microsoft outlook"],
            "notepad": ["notepad", "bloc-notes", "bloc notes"],
            "calculator": ["calc", "calculatrice"],
            "paint": ["paint", "peinture"],
            "skype": ["skype"],
            "discord": ["discord"],
            "spotify": ["spotify"],
            "vlc": ["vlc", "vlc media player"],
            "steam": ["steam"],
            "adobe": ["adobe"],
            "photoshop": ["photoshop"]
        }
        
        for app_type, keywords in specific_mappings.items():
            for keyword in keywords:
                if keyword in app_name or app_name in keyword:
                    # Priorit√© aux correspondances exactes
                    exact_matches = []
                    partial_matches = []
                    
                    for app_key, app_data in self.applications.items():
                        app_key_lower = app_key.lower()
                        app_nom_lower = app_data["nom"].lower()
                        
                        # Correspondance exacte prioritaire
                        if (keyword == app_key_lower or 
                            keyword in app_key_lower.split() or 
                            app_type in app_key_lower):
                            exact_matches.append((app_key, app_data))
                        # Correspondance partielle
                        elif keyword in app_key_lower or keyword in app_nom_lower:
                            partial_matches.append((app_key, app_data))
                    
                    # Prioriser les correspondances exactes
                    best_matches = exact_matches if exact_matches else partial_matches
                    
                    if best_matches:
                        app_key, app_data = best_matches[0]  # Prendre la premi√®re
                        print(f"‚úÖ Trouv√© via mapping sp√©cifique: '{keyword}' ‚Üí {app_key}")
                        return app_key, app_data
        
        # Recherche 3: Dans les noms d'applications (recherche contient)
        # Recherche 3: Dans les noms d'applications (recherche contient)
        for app_key, app_data in self.applications.items():
            nom_lower = app_data["nom"].lower()
            app_key_lower = app_key.lower()
            
            # Recherche bidirectionnelle - mais √©viter les correspondances trop courtes
            if len(app_name) > 3:  # √âviter les matches sur "de", "le", etc.
                if (app_name in nom_lower or nom_lower in app_name or 
                    app_name in app_key_lower or app_key_lower in app_name):
                    print(f"‚úÖ Trouv√© via nom: '{app_data['nom']}' (cl√©: {app_key})")
                    return app_key, app_data
        
        # Recherche 4: Recherche partielle dans les mots du nom (plus stricte)
        for app_key, app_data in self.applications.items():
            nom_mots = app_data["nom"].lower().split()
            for mot in nom_mots:
                if len(mot) > 3 and len(app_name) > 3:  # Mots plus longs uniquement
                    if (app_name in mot or mot in app_name) and abs(len(app_name) - len(mot)) <= 3:
                        print(f"‚úÖ Trouv√© via mot: '{mot}' dans '{app_data['nom']}'")
                        return app_key, app_data
        
        # Recherche 5: Recherche fuzzy pour les noms similaires (plus stricte)
        for app_key, app_data in self.applications.items():
            nom_clean = ''.join(c for c in app_data["nom"].lower() if c.isalnum())
            app_name_clean = ''.join(c for c in app_name if c.isalnum())
            
            if len(app_name_clean) > 3 and len(nom_clean) > 3:
                if app_name_clean in nom_clean or nom_clean in app_name_clean:
                    # V√©rifier que c'est une correspondance raisonnable (pas trop de diff√©rence de taille)
                    if abs(len(app_name_clean) - len(nom_clean)) <= max(len(app_name_clean), len(nom_clean)) // 2:
                        print(f"‚úÖ Trouv√© via recherche fuzzy: '{app_data['nom']}'")
                        return app_key, app_data
        
        print(f"‚ùå Aucune application trouv√©e pour: '{app_name}'")
        
        # ü§ñ NOUVELLE FONCTIONNALIT√â IA : Recherche intelligente avec Mistral
        print("ü§ñ Activation de la recherche IA intelligente...")
        ai_result = self.ai_smart_app_search(app_name, query)
        if ai_result:
            return ai_result
        
        return None, None
    
    def generate_uwp_variants(self, base_id, app_key):
        """G√©n√®re des variantes d'ID UWP pour maximiser les chances d'ouverture"""
        variants = []
        
        # Variante 1: ID de base (tel qu'il est dans le fichier)
        variants.append(base_id)
        
        # Variante 2: Avec PackageFamilyName complet
        if not "_mcm4njqhnhss8" in base_id and "netflix" in app_key.lower():
            variants.append(f"{base_id}_mcm4njqhnhss8")
        
        # Variante 3: Avec Application ID complet (format !App)
        if not "!" in base_id:
            if "netflix" in app_key.lower():
                variants.append(f"{base_id}_mcm4njqhnhss8!Netflix.App")
            else:
                # Format g√©n√©rique pour autres apps
                variants.append(f"{base_id}!App")
        
        # Variante 4: Si l'ID contient d√©j√† le PackageFamilyName, ajouter !App
        if "_mcm4njqhnhss8" in base_id and "!" not in base_id:
            if "netflix" in app_key.lower():
                variants.append(f"{base_id}!Netflix.App")
            else:
                variants.append(f"{base_id}!App")
        
        # Variante 5: ID simplifi√© (juste le nom de package)
        if "." in base_id:
            package_name = base_id.split(".")[0] + "." + base_id.split(".")[1]
            if package_name not in variants:
                variants.append(package_name)
        
        # Enlever les doublons tout en pr√©servant l'ordre
        unique_variants = []
        for v in variants:
            if v not in unique_variants:
                unique_variants.append(v)
        
        print(f"üß¨ G√©n√©r√©s {len(unique_variants)} variants UWP pour {app_key}")
        for i, variant in enumerate(unique_variants, 1):
            print(f"   {i}. {variant}")
        
        return unique_variants

    def ai_smart_app_search(self, app_name, original_query):
        """Utilise l'IA pour une recherche intelligente directe d'applications"""
        try:
            # Cr√©er une liste des applications disponibles pour l'IA avec les plus importantes en premier
            important_apps = []
            other_apps = []
            
            for app_key, app_data in self.applications.items():
                app_line = f"- {app_data['nom']} (cl√©: {app_key})"
                
                # Prioriser les applications importantes
                if any(keyword in app_key.lower() for keyword in ['netflix', 'chrome', 'firefox', 'edge', 'vlc', 'spotify', 'word', 'excel']):
                    important_apps.append(app_line)
                else:
                    other_apps.append(app_line)
            
            # Limiter la liste pour √©viter une requ√™te trop longue
            selected_apps = important_apps[:20] + other_apps[:40]
            apps_list = "\n".join(selected_apps)
            
            # ü§ñ REQU√äTE IA AM√âLIOR√âE avec exemples concrets
            ai_prompt = f"""
ANALYSE DIRECTE DE LA DEMANDE UTILISATEUR:

PHRASE COMPL√àTE: "{original_query}"

APPLICATIONS DISPONIBLES:
{apps_list}

INSTRUCTIONS PR√âCISES:
1. Analyse la phrase compl√®te de l'utilisateur
2. Identifie EXACTEMENT quelle application il veut ouvrir
3. EXEMPLES CONCRETS:
   - "je veux que tu ouvres Netflix" ‚Üí cherche "netflix" dans la liste ‚Üí r√©ponse: "4df9e0f8.netflix"
   - "lance le navigateur" ‚Üí cherche "chrome" ou "firefox" ou "edge" ‚Üí r√©ponse: "google chrome" ou "firefox"
   - "je veux regarder un film" ‚Üí cherche "netflix" ou "vlc" ‚Üí r√©ponse: "4df9e0f8.netflix" ou "vlc media player"
   - "ouvre Word" ‚Üí cherche "word" ‚Üí r√©ponse: "microsoft word"

4. R√©ponds UNIQUEMENT avec la cl√© exacte de l'application (ce qui est entre parenth√®ses)
5. Si aucune correspondance √©vidente, r√©ponds "AUCUNE"
6. Ne te laisse pas tromper par des mots parasites

R√âPONSE (cl√© exacte uniquement):"""
            
            print("ü§ñ Consultation IA directe...")
            ai_response = self.query_mistral(ai_prompt)
            
            if ai_response and ai_response.strip().lower() != "aucune":
                # Nettoyer la r√©ponse IA
                ai_key = ai_response.strip().lower()
                
                # V√©rifier si la cl√© existe
                if ai_key in self.applications:
                    print(f"‚úÖ IA a identifi√© directement: '{ai_key}' ‚Üí {self.applications[ai_key]['nom']}")
                    return ai_key, self.applications[ai_key]
                
                # Recherche fuzzy sur la r√©ponse IA
                for app_key, app_data in self.applications.items():
                    if ai_key in app_key.lower() or app_key.lower() in ai_key:
                        print(f"‚úÖ IA a sugg√©r√© (correspondance): '{app_key}' ‚Üí {app_data['nom']}")
                        return app_key, app_data
                        
            print("ü§ñ L'IA n'a pas identifi√© d'application correspondante")
            return None
            
        except Exception as e:
            print(f"‚ùå Erreur recherche IA: {e}")
            return None
    
    def ai_suggest_alternatives(self, failed_app_name):
        """L'IA sugg√®re des applications alternatives"""
        try:
            # Prendre un √©chantillon d'applications populaires
            popular_apps = []
            for app_key, app_data in list(self.applications.items())[:30]:
                popular_apps.append(f"- {app_data['nom']}")
            
            apps_list = "\n".join(popular_apps)
            
            ai_prompt = f"""
L'utilisateur a demand√© "{failed_app_name}" mais cette application n'a pas √©t√© trouv√©e.

APPLICATIONS DISPONIBLES:
{apps_list}

Sugg√®re 3 applications similaires ou alternatives qui pourraient l'int√©resser.
R√©ponds de mani√®re concise et naturelle en fran√ßais.
Format: "Voici quelques alternatives : [app1], [app2], [app3]"
"""
            
            response = self.query_mistral(ai_prompt)
            return response if response else "Je n'ai pas pu trouver d'alternatives appropri√©es."
            
        except Exception as e:
            print(f"‚ùå Erreur suggestions IA: {e}")
            return "Erreur lors de la g√©n√©ration de suggestions."
    
    def ai_help_context(self, user_query):
        """L'IA g√©n√®re de l'aide contextuelle"""
        try:
            ai_prompt = f"""
L'utilisateur a dit: "{user_query}"

Tu es un assistant vocal PC. Fournis une aide courte et pratique en fran√ßais.
Explique ce que l'utilisateur peut faire ou comment reformuler sa demande.
Sois concis (max 2 phrases).
"""
            
            response = self.query_mistral(ai_prompt)
            return response if response else "Je peux vous aider avec l'ouverture d'applications, des recherches web, ou r√©pondre √† vos questions."
            
        except Exception as e:
            print(f"‚ùå Erreur aide IA: {e}")
            return "Aide non disponible pour le moment."
    
    def ai_analyze_command(self, command):
        """L'IA analyse une commande ambigu√´ pour mieux la cat√©goriser"""
        try:
            ai_prompt = f"""
Analyse cette commande utilisateur: "{command}"

CAT√âGORIES POSSIBLES:
- ACTION_OUVRIR: ouvrir/lancer une application
- ACTION_FERMER: fermer une application
- ACTION_LISTER: lister les applications
- ACTION_RECHERCHER: recherche web
- QUESTION: question g√©n√©rale

R√©ponds UNIQUEMENT avec une des cat√©gories ci-dessus.
Si c'est ambig√º, choisis la cat√©gorie la plus probable.

R√âPONSE:"""
            
            response = self.query_mistral(ai_prompt)
            return response.strip() if response else "QUESTION"
            
        except Exception as e:
            print(f"‚ùå Erreur analyse IA: {e}")
            return "QUESTION"

    def action_ouvrir_application(self, params):
        """Ouvre une application avec gestion sp√©ciale pour les apps UWP"""
        app_name = params.get("application", "inconnue")
        
        if app_name == "inconnue":
            return False, "Je n'ai pas compris quelle application vous voulez ouvrir. Essayez : 'Ouvre Chrome' ou 'Lance le bloc-notes'"
        
        # Utiliser la nouvelle fonction de recherche am√©lior√©e
        app_key, app_data = self.find_application(app_name)
        
        if not app_key or not app_data:
            # ü§ñ AM√âLIORATION IA : Suggestions intelligentes d'alternatives
            print("ü§ñ G√©n√©ration de suggestions IA...")
            ai_suggestions = self.ai_suggest_alternatives(app_name)
            
            # Retourner le message avec suggestions IA
            return False, f"L'application '{app_name}' n'a pas √©t√© trouv√©e. {ai_suggestions}"
        
        try:
            print(f"üöÄ Tentative d'ouverture de {app_data['nom']}...")
            chemin = app_data["chemin"]
            
            # D√©tecter si c'est une application UWP (Windows Store)
            if "shell:appsfolder" in chemin or "start shell:appsfolder" in chemin:
                print("üì± Application UWP d√©tect√©e")
                
                # Extraire l'ID de l'application UWP
                if "start shell:appsfolder\\" in chemin:
                    app_id = chemin.replace("start shell:appsfolder\\", "")
                elif "shell:appsfolder\\" in chemin:
                    app_id = chemin.replace("shell:appsfolder\\", "")
                else:
                    app_id = chemin
                
                print(f"üîç ID UWP initial: {app_id}")
                
                # Optimisation intelligente pour UWP : tester plusieurs variantes d'ID
                uwp_variants = self.generate_uwp_variants(app_id, app_key)
                
                for i, variant in enumerate(uwp_variants, 1):
                    print(f"üß™ Test UWP variant {i}: {variant}")
                    
                    # Priorit√© √† PowerShell qui fonctionne le mieux pour UWP
                    try:
                        cmd = f'powershell -Command "Start-Process \\"shell:appsfolder\\{variant}\\""'
                        print(f"üîß Commande PowerShell: {cmd}")
                        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=8)
                        if result.returncode == 0:
                            print(f"‚úÖ Succ√®s avec PowerShell ! Variant: {variant}")
                            return True, f"‚úÖ {app_data['nom']} a √©t√© ouvert avec succ√®s !"
                        else:
                            print(f"‚ùå PowerShell variant {i} √©chou√©")
                    except Exception as e:
                        print(f"‚ùå Exception PowerShell variant {i}: {e}")
                    
                    # Si PowerShell √©choue, tester Explorer
                    try:
                        cmd = f'explorer "shell:appsfolder\\{variant}"'
                        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=6)
                        if result.returncode == 0:
                            print(f"‚úÖ Succ√®s avec Explorer ! Variant: {variant}")
                            return True, f"‚úÖ {app_data['nom']} a √©t√© ouvert avec succ√®s !"
                    except Exception as e:
                        print(f"‚ùå Exception Explorer variant {i}: {e}")
                
                return False, f"‚ùå Impossible d'ouvrir l'application UWP {app_data['nom']}. Tous les variants test√©s ont √©chou√©."
            
            else:
                # Application classique (non-UWP) - Le chemin est d√©j√† correct gr√¢ce au scanner avanc√©
                print("üñ•Ô∏è Application classique d√©tect√©e")
                
                # M√©thode 1: Chemin direct
                try:
                    print(f"üîß Ouverture avec chemin scann√©: {chemin}")
                    subprocess.Popen(chemin, shell=True)
                    return True, f"‚úÖ {app_data['nom']} a √©t√© ouvert avec succ√®s !"
                    
                except Exception as e1:
                    print(f"‚ùå M√©thode directe √©chou√©e: {e1}")
                    
                    # M√©thode 2: Avec start
                    try:
                        cmd = f'start "" "{chemin}"'
                        print(f"üîß Tentative avec start: {cmd}")
                        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=5)
                        if result.returncode == 0:
                            return True, f"‚úÖ {app_data['nom']} est en cours d'ouverture..."
                        else:
                            print(f"‚ùå Start command failed with code {result.returncode}")
                            print(f"‚ùå Stderr: {result.stderr}")
                            return False, f"‚ùå Impossible d'ouvrir {app_data['nom']}. V√©rifiez que l'application est toujours install√©e."
                    except Exception as e2:
                        print(f"‚ùå M√©thode start √©chou√©e: {e2}")
                        return False, f"‚ùå Impossible d'ouvrir {app_data['nom']}. Application peut-√™tre non accessible."
                    
        except Exception as e:
            return False, f"‚ùå Erreur lors de l'ouverture de {app_data['nom']} : {str(e)}"
    
    def action_lister_applications(self, params=None):
        """Liste les applications disponibles"""
        try:
            total_apps = len(self.applications)
            
            # Prendre les 20 premi√®res applications pour ne pas surcharger
            apps_sample = list(self.applications.items())[:20]
            apps_names = [app_data["nom"] for _, app_data in apps_sample]
            
            message = f"J'ai {total_apps} applications disponibles. Voici les principales : {', '.join(apps_names[:10])}"
            
            if total_apps > 10:
                message += f" et {total_apps - 10} autres."
            
            return True, message
            
        except Exception as e:
            return False, f"Erreur lors de la liste des applications : {str(e)}"

    def action_fermer_application(self, params):
        """Ferme une application"""
        app_name = params.get("application", "inconnue")
        
        if app_name == "inconnue":
            return False, "Je n'ai pas compris quelle application vous voulez fermer."
        
        if app_name not in self.applications:
            return False, f"L'application '{app_name}' n'est pas dans ma liste d'applications connues."
        
        app_info = self.applications[app_name]
        
        try:
            # Utiliser taskkill pour fermer l'application
            result = subprocess.run(f'taskkill /F /IM "{app_info["processus"]}"', shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                return True, f"‚úÖ {app_info['nom']} a √©t√© ferm√© avec succ√®s !"
            else:
                return False, f"‚ùå {app_info['nom']} n'est pas en cours d'ex√©cution ou impossible √† fermer."
                
        except Exception as e:
            return False, f"‚ùå Erreur lors de la fermeture de {app_info['nom']} : {str(e)}"
    
    def action_ouvrir_fichier(self, params):
        """Ouvre un fichier (√† impl√©menter)"""
        return False, "La fonction d'ouverture de fichiers n'est pas encore impl√©ment√©e."
    
    def action_rechercher_web(self, params):
        """Effectue une recherche web"""
        query = params.get("query", "inconnue")
        
        if query == "inconnue":
            return False, "Je n'ai pas compris ce que vous voulez rechercher."
        
        try:
            # Cr√©er l'URL de recherche Google
            search_url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
            
            # Ouvrir dans le navigateur par d√©faut
            result = subprocess.run(f'start "" "{search_url}"', shell=True, capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                return True, f"‚úÖ Recherche lanc√©e pour : {query}"
            else:
                return False, f"‚ùå Impossible de lancer la recherche pour : {query}"
                
        except Exception as e:
            return False, f"‚ùå Erreur lors de la recherche : {str(e)}"
    
    def listen_for_wake_word(self):
        """√âcoute le mot de r√©veil 'Assistant'"""
        print("üëÇ En attente du mot de r√©veil 'Assistant'...")
        
        with self.microphone as source:
            print("üîß Calibration du microphone pour le bruit ambiant...")
            self.recognizer.adjust_for_ambient_noise(source, duration=2)
            print(f"‚úÖ Seuil d'√©nergie ajust√© √†: {self.recognizer.energy_threshold}")
        
        while self.active:
            try:
                with self.microphone as source:
                    # √âcoute passive pour le mot de r√©veil avec timeout plus court
                    audio = self.recognizer.listen(source, timeout=1, phrase_time_limit=4)
                
                try:
                    text = self.recognizer.recognize_google(audio, language='fr-FR').lower()
                    print(f"üé§ D√©tect√©: {text}")
                    
                    if 'assistant' in text:
                        self.speak("Pr√©sent ! Je vous √©coute.")
                        # Entrer en mode conversation continue
                        self.conversation_mode()
                
                except sr.UnknownValueError:
                    pass  # Rien compris, continuer l'√©coute
                
            except sr.WaitTimeoutError:
                pass  # Timeout normal, continuer
            except Exception as e:
                print(f"‚ùå Erreur d'√©coute: {e}")
                time.sleep(1)
    
    def conversation_mode(self):
        """Mode conversation continue apr√®s le mot de r√©veil"""
        print("üí¨ Mode conversation activ√© - Parlez naturellement ou dites 'fini' pour arr√™ter")
        print("‚è±Ô∏è  Configuration: Pause de 1.5s avant traitement, pas de limite de temps")
        
        while self.active:
            try:
                with self.microphone as source:
                    print("üé§ Parlez maintenant... (Prenez votre temps, je vous laisse finir)")
                    # Param√®tres optimis√©s pour laisser le temps de parler
                    audio = self.recognizer.listen(
                        source, 
                        timeout=15,  # Timeout plus long pour commencer √† parler
                        phrase_time_limit=30  # Limite de 30 secondes pour une phrase compl√®te
                    )
                
                try:
                    print("üîÑ Traitement de votre parole... (cela peut prendre quelques secondes)")
                    command = self.recognizer.recognize_google(audio, language='fr-FR')
                    print(f"üé§ Commande re√ßue: {command}")
                    
                    # V√©rifier les commandes de sortie de conversation
                    command_lower = command.lower()
                    if any(word in command_lower for word in ['fini', 'termin√©', 'stop conversation', 'pause']):
                        self.speak("Conversation termin√©e. Redites 'Assistant' pour me r√©veiller.")
                        print("üëÇ Retour au mode d'√©coute du mot de r√©veil...")
                        break
                    
                    # FEEDBACK : Confirmer qu'on a compris et qu'on commence
                    self.speak(f"Compris ! Je traite votre demande : {command}")
                    
                    # Traiter la commande
                    self.process_command(command)
                    
                    # Si l'assistant doit s'arr√™ter compl√®tement, sortir
                    if not self.active:
                        break
                    
                    # Confirmer que la t√¢che est termin√©e
                    self.speak("T√¢che termin√©e ! Que puis-je faire d'autre pour vous ?")
                    print("üí¨ Continuez la conversation ou dites 'fini'...")
                    
                except sr.UnknownValueError:
                    print("‚ùå Parole non comprise")
                    self.speak("D√©sol√©, je n'ai pas compris votre parole. Pouvez-vous r√©p√©ter plus clairement ?")
                except sr.RequestError as e:
                    print(f"‚ùå Erreur de reconnaissance: {e}")
                    self.speak(f"Erreur de reconnaissance vocale d√©tect√©e : {str(e)}. Veuillez r√©essayer.")
                    
            except sr.WaitTimeoutError:
                print("‚è∞ Timeout - retour au mode d'√©coute")
                self.speak("Je n'ai rien entendu pendant 15 secondes. Je retourne en mode veille. Redites 'Assistant' pour me r√©veiller.")
                break
    
    def listen_for_command(self):
        """√âcoute une commande apr√®s le mot de r√©veil"""
        print("üëÇ En attente de votre commande...")
        
        try:
            with self.microphone as source:
                # √âcoute active pour la commande avec plus de patience
                print("üé§ Parlez maintenant... (Prenez votre temps)")
                audio = self.recognizer.listen(
                    source, 
                    timeout=12,  # Plus de temps pour commencer
                    phrase_time_limit=25  # Plus de temps pour finir
                )
            
            try:
                print("üîÑ Traitement de votre parole...")
                command = self.recognizer.recognize_google(audio, language='fr-FR')
                print(f"üé§ Commande re√ßue: {command}")
                
                # FEEDBACK IMPORTANT : Confirmer qu'on a compris
                self.speak(f"J'ai compris: {command}. Je traite votre demande.")
                
                # Traiter la commande
                self.process_command(command)
                
            except sr.UnknownValueError:
                print("‚ùå Parole non comprise")
                self.speak("D√©sol√©, je n'ai pas compris votre demande. Pouvez-vous r√©p√©ter plus clairement ?")
            except sr.RequestError as e:
                print(f"‚ùå Erreur de reconnaissance: {e}")
                self.speak("Erreur de reconnaissance vocale. Veuillez r√©essayer.")
                
        except sr.WaitTimeoutError:
            print("‚è∞ Timeout - rien entendu")
            self.speak("Je n'ai rien entendu. Redites 'Assistant' pour me r√©veiller.")
    
    def process_command(self, command):
        """Traite une commande vocale avec syst√®me de cat√©gorisation intelligent"""
        command_lower = command.lower()
        
        # Commandes sp√©ciales de contr√¥le de l'assistant (priorit√© absolue)
        if any(word in command_lower for word in ['arr√™t', 'stop', 'au revoir', 'fermer assistant', 'arr√™te toi']):
            self.speak("Commande d'arr√™t re√ßue. Au revoir ! √Ä bient√¥t.")
            self.active = False
            return
        
        if any(word in command_lower for word in ['silence', 'tais-toi', 'chut']):
            self.speak("Commande de silence re√ßue. D'accord, je me tais.")
            return
        
        # Commandes de test et configuration voix
        if any(word in command_lower for word in ['test voix', 'test audio']):
            self.speak("Test de la synth√®se vocale en cours.")
            time.sleep(0.5)
            if self.current_tts_method == "coqui":
                self.speak("Vous entendez actuellement la voix Coqui TTS.")
            else:
                self.speak("Vous entendez actuellement la voix fran√ßaise Hortense Windows. Dites 'voix naturelle' pour essayer Coqui TTS si disponible.")
            return
        
        if any(word in command_lower for word in ['voix naturelle', 'coqui', 'meilleure voix']):
            if COQUI_AVAILABLE and self.coqui_engine:
                self.current_tts_method = "coqui"
                self.speak("Basculement vers la voix Coqui TTS. Attention, cette voix peut avoir un l√©ger accent anglais.")
            else:
                self.speak("La voix Coqui TTS n'est pas disponible. Utilisation de la voix fran√ßaise Windows.")
            return
        
        if any(word in command_lower for word in ['voix fran√ßaise', 'voix windows', 'voix classique', 'sapi', 'hortense']):
            self.current_tts_method = "sapi"
            self.speak("Basculement vers la voix fran√ßaise Windows Hortense.")
            return
        
        # ü§ñ NOUVELLE COMMANDE IA : Aide contextuelle
        if any(word in command_lower for word in ['aide', 'help', 'comment', 'que puis-je', 'guide']):
            print("ü§ñ G√©n√©ration d'aide contextuelle par l'IA...")
            ai_help = self.ai_help_context(command)
            self.speak(ai_help)
            return
        
        # ========================================
        # NOUVEAU SYST√àME DE CAT√âGORISATION + IA
        # ========================================
        
        print(f"üîç Analyse de la demande : {command}")
        
        # √âtape 1: Cat√©goriser la demande
        request_type, action_type, original_command = self.categorize_request(command)
        
        print(f"üìä Type de demande : {request_type}")
        if action_type:
            print(f"üéØ Type d'action : {action_type}")
        
        # ü§ñ AM√âLIORATION IA : Si la cat√©gorisation √©choue, demander √† l'IA
        if request_type == "QUESTION" and not action_type:
            ai_analysis = self.ai_analyze_command(command)
            if ai_analysis and ai_analysis != "QUESTION":
                print(f"ü§ñ L'IA a recat√©goris√© en: {ai_analysis}")
                if ai_analysis in ["ACTION_OUVRIR", "ACTION_FERMER", "ACTION_LISTER"]:
                    request_type = "ACTION"
                    action_type = ai_analysis.replace("ACTION_", "").lower()
        
        if request_type == "ACTION":
            # C'est une action √† ex√©cuter
            self.speak(f"Action d√©tect√©e : {action_type}. Je traite votre demande.")
            
            # Analyser les d√©tails de l'action
            function_name, params = self.analyze_action_request(command, action_type)
            
            if function_name and function_name in self.action_functions:
                print(f"üîß Ex√©cution de la fonction : {function_name}")
                print(f"üìã Param√®tres : {params}")
                
                # Ex√©cuter la fonction d'action
                try:
                    success, message = self.action_functions[function_name](params)
                    
                    if success:
                        print(f"‚úÖ Action r√©ussie : {message}")
                        self.speak(message)
                    else:
                        print(f"‚ùå Action √©chou√©e : {message}")
                        self.speak(message)
                        
                except Exception as e:
                    error_msg = f"Erreur lors de l'ex√©cution de l'action : {str(e)}"
                    print(f"‚ùå {error_msg}")
                    self.speak(error_msg)
            else:
                # Action non support√©e
                unsupported_msg = f"Je ne peux pas effectuer cette action pour le moment. Action demand√©e : {action_type}"
                print(f"‚ö†Ô∏è {unsupported_msg}")
                self.speak(unsupported_msg)
                
        elif request_type == "QUESTION":
            # C'est une question - envoyer √† Mistral
            print("‚ùì Question d√©tect√©e - Envoi √† Mistral")
            self.speak("Question d√©tect√©e. Je consulte Mistral pour vous r√©pondre.")
            
            try:
                response = self.query_mistral(command)
                
                if response and response.strip():
                    print(f"üìù R√©ponse Mistral: {response}")
                    self.speak("R√©ponse re√ßue de Mistral avec succ√®s.")
                    time.sleep(0.3)
                    self.speak(response)
                else:
                    error_msg = "Mistral n'a pas pu g√©n√©rer de r√©ponse."
                    print(f"‚ùå {error_msg}")
                    self.speak(error_msg)
                    
            except Exception as e:
                error_details = str(e)
                error_msg = f"Erreur lors de la consultation de Mistral : {error_details}"
                print(f"‚ùå {error_msg}")
                self.speak("Une erreur s'est produite lors de la consultation de Mistral.")
        
        # Confirmation de fin de traitement
        self.speak("Traitement termin√© avec succ√®s !")
    
    def query_mistral(self, prompt):
        """Envoie une requ√™te √† l'API Ollama Mistral avec feedback d√©taill√©"""
        url = f"{self.ollama_url}/api/generate"
        
        payload = {
            "model": self.model_name,
            "prompt": f"R√©ponds en fran√ßais de mani√®re concise et naturelle √† cette question ou demande : {prompt}",
            "stream": False
        }
        
        try:
            print(f"ü§ñ Envoi √† Mistral: {prompt}")
            start_time = time.time()
            
            response = requests.post(url, json=payload, timeout=30)
            response.raise_for_status()
            
            end_time = time.time()
            duration = end_time - start_time
            
            result = response.json()
            response_text = result.get('response', '').strip()
            
            # Feedback de succ√®s avec d√©tails
            print(f"‚úÖ R√©ponse re√ßue en {duration:.2f}s")
            if result.get('eval_count'):
                print(f"üìä {result.get('eval_count')} tokens g√©n√©r√©s")
            
            return response_text
            
        except requests.exceptions.Timeout:
            error_msg = "Timeout : Mistral met trop de temps √† r√©pondre"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
        except requests.exceptions.ConnectionError:
            error_msg = "Erreur de connexion : Impossible de joindre Ollama. V√©rifiez que le serveur est d√©marr√©"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
        except requests.exceptions.RequestException as e:
            error_msg = f"Erreur API Ollama : {str(e)}"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
    
    def test_components(self):
        """Teste les composants de l'assistant"""
        print("üß™ Test des composants...")
        
        # Test TTS avec feedback d√©taill√©
        print("üîä Test de la synth√®se vocale...")
        test_phrase = "Test de la synth√®se vocale. Vous devez entendre cette phrase √† voix haute."
        self.speak(test_phrase)
        
        # Demander confirmation √† l'utilisateur
        audio_ok = input("Avez-vous entendu la synth√®se vocale ? (o/n): ").lower()
        if audio_ok not in ['o', 'oui', 'y', 'yes']:
            print("‚ö†Ô∏è  Probl√®me audio d√©tect√© - v√©rifiez vos haut-parleurs")
        
        # Test microphone
        print("üé§ Test du microphone - dites 'test microphone'...")
        try:
            with self.microphone as source:
                print("üîß Ajustement du bruit ambiant...")
                self.recognizer.adjust_for_ambient_noise(source, duration=2)
                print("üëÇ En √©coute... (vous avez 8 secondes, prenez votre temps)")
                audio = self.recognizer.listen(source, timeout=8, phrase_time_limit=20)
                
            print("üîÑ Traitement de l'audio...")
            text = self.recognizer.recognize_google(audio, language='fr-FR')
            print(f"‚úÖ Microphone OK - D√©tect√©: {text}")
            self.speak(f"Parfait ! J'ai bien entendu: {text}")
            
        except sr.WaitTimeoutError:
            print("‚è∞ Rien entendu dans les 8 secondes")
            self.speak("Je n'ai rien entendu. V√©rifiez votre microphone.")
        except Exception as e:
            print(f"‚ùå Erreur microphone: {e}")
            self.speak("Erreur de microphone d√©tect√©e.")
        
        # Test API Mistral
        print("ü§ñ Test de l'API Mistral...")
        response = self.query_mistral("R√©ponds simplement 'Test API r√©ussi'")
        if response:
            print(f"‚úÖ API Mistral OK - R√©ponse: {response}")
            self.speak(f"Excellent ! Mistral r√©pond: {response}")
        else:
            print("‚ùå Erreur API Mistral")
            self.speak("Probl√®me de connexion avec Mistral.")
        
        print("\nüéØ Tests termin√©s. L'assistant est pr√™t !")
    
    def run(self):
        """Lance l'assistant vocal"""
        print("üöÄ D√©marrage de l'assistant vocal...")
        print("üí° Dites 'Assistant' pour me r√©veiller")
        print("üí° Une fois en conversation, parlez naturellement")
        print("üí° Dites 'fini' pour revenir au mode veille")
        print("üí° Dites 'au revoir' pour m'arr√™ter compl√®tement")
        print("-" * 50)
        
        try:
            self.listen_for_wake_word()
        except KeyboardInterrupt:
            print("\nüëã Arr√™t de l'assistant...")
            self.active = False
            self.speak("Au revoir !")

def main():
    print("ü§ñ Assistant Vocal PC avec Ollama Mistral")
    print("=" * 50)
    
    try:
        assistant = AssistantVocal()
        
        # Demander si on veut faire des tests
        choice = input("\nVoulez-vous tester les composants d'abord ? (o/n): ").lower()
        if choice in ['o', 'oui', 'y', 'yes']:
            assistant.test_components()
            input("\nAppuyez sur Entr√©e pour continuer...")
        
        # Lancer l'assistant
        assistant.run()
        
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")

if __name__ == "__main__":
    main()
